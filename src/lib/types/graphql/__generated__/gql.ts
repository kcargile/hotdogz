/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

const documents = {
    "fragment DogFields on Dog {\n  title\n  url\n  bio\n  birthday\n  breed\n  dislikes\n  favorite_color\n  good_fetch_rating\n  likes\n  seeking\n  spayed_neutered\n  vax_status\n  photoConnection {\n    edges {\n      node {\n        content_type\n        description\n        dimension {\n          height\n          width\n        }\n        system {\n          created_at\n          uid\n        }\n        title\n        url\n      }\n    }\n    totalCount\n  }\n  system {\n    created_at\n    uid\n  }\n}": types.DogFieldsFragmentDoc,
    "fragment GlobalSettingsFields on AllGlobalSettings {\n  items {\n    attribution\n    copyright\n    default_dog_imageConnection {\n      edges {\n        node {\n          url\n          dimension {\n            height\n            width\n          }\n          system {\n            created_at\n            uid\n          }\n        }\n      }\n    }\n    faviconConnection {\n      edges {\n        node {\n          url\n          dimension {\n            height\n            width\n          }\n          system {\n            created_at\n            uid\n          }\n        }\n      }\n    }\n    site_title\n    logoConnection {\n      edges {\n        node {\n          url\n          dimension {\n            height\n            width\n          }\n          system {\n            created_at\n            uid\n          }\n        }\n      }\n    }\n  }\n}": types.GlobalSettingsFieldsFragmentDoc,
    "query FetchGlobalSettings {\n  all_global_settings {\n    ...GlobalSettingsFields\n  }\n}": types.FetchGlobalSettingsDocument,
    "query FetchPage($url: String!) {\n  all_global_settings {\n    ...GlobalSettingsFields\n  }\n  all_page(where: {url: $url}) {\n    total\n    items {\n      title\n      url\n      global_field {\n        canonical {\n          href\n          title\n        }\n        description\n        nofollow\n        noindex\n        og_tags {\n          key\n          value\n        }\n        schema\n        title\n      }\n      main_content {\n        ... on PageMainContentMainCopy {\n          __typename\n          main_copy {\n            item {\n              json\n            }\n            title\n          }\n        }\n      }\n      featured_contentConnection {\n        edges {\n          node {\n            ... on Dog {\n              ...DogFields\n            }\n          }\n        }\n      }\n      system {\n        created_at\n        uid\n      }\n    }\n  }\n}": types.FetchPageDocument,
};

export function graphql(source: "fragment DogFields on Dog {\n  title\n  url\n  bio\n  birthday\n  breed\n  dislikes\n  favorite_color\n  good_fetch_rating\n  likes\n  seeking\n  spayed_neutered\n  vax_status\n  photoConnection {\n    edges {\n      node {\n        content_type\n        description\n        dimension {\n          height\n          width\n        }\n        system {\n          created_at\n          uid\n        }\n        title\n        url\n      }\n    }\n    totalCount\n  }\n  system {\n    created_at\n    uid\n  }\n}"): (typeof documents)["fragment DogFields on Dog {\n  title\n  url\n  bio\n  birthday\n  breed\n  dislikes\n  favorite_color\n  good_fetch_rating\n  likes\n  seeking\n  spayed_neutered\n  vax_status\n  photoConnection {\n    edges {\n      node {\n        content_type\n        description\n        dimension {\n          height\n          width\n        }\n        system {\n          created_at\n          uid\n        }\n        title\n        url\n      }\n    }\n    totalCount\n  }\n  system {\n    created_at\n    uid\n  }\n}"];
export function graphql(source: "fragment GlobalSettingsFields on AllGlobalSettings {\n  items {\n    attribution\n    copyright\n    default_dog_imageConnection {\n      edges {\n        node {\n          url\n          dimension {\n            height\n            width\n          }\n          system {\n            created_at\n            uid\n          }\n        }\n      }\n    }\n    faviconConnection {\n      edges {\n        node {\n          url\n          dimension {\n            height\n            width\n          }\n          system {\n            created_at\n            uid\n          }\n        }\n      }\n    }\n    site_title\n    logoConnection {\n      edges {\n        node {\n          url\n          dimension {\n            height\n            width\n          }\n          system {\n            created_at\n            uid\n          }\n        }\n      }\n    }\n  }\n}"): (typeof documents)["fragment GlobalSettingsFields on AllGlobalSettings {\n  items {\n    attribution\n    copyright\n    default_dog_imageConnection {\n      edges {\n        node {\n          url\n          dimension {\n            height\n            width\n          }\n          system {\n            created_at\n            uid\n          }\n        }\n      }\n    }\n    faviconConnection {\n      edges {\n        node {\n          url\n          dimension {\n            height\n            width\n          }\n          system {\n            created_at\n            uid\n          }\n        }\n      }\n    }\n    site_title\n    logoConnection {\n      edges {\n        node {\n          url\n          dimension {\n            height\n            width\n          }\n          system {\n            created_at\n            uid\n          }\n        }\n      }\n    }\n  }\n}"];
export function graphql(source: "query FetchGlobalSettings {\n  all_global_settings {\n    ...GlobalSettingsFields\n  }\n}"): (typeof documents)["query FetchGlobalSettings {\n  all_global_settings {\n    ...GlobalSettingsFields\n  }\n}"];
export function graphql(source: "query FetchPage($url: String!) {\n  all_global_settings {\n    ...GlobalSettingsFields\n  }\n  all_page(where: {url: $url}) {\n    total\n    items {\n      title\n      url\n      global_field {\n        canonical {\n          href\n          title\n        }\n        description\n        nofollow\n        noindex\n        og_tags {\n          key\n          value\n        }\n        schema\n        title\n      }\n      main_content {\n        ... on PageMainContentMainCopy {\n          __typename\n          main_copy {\n            item {\n              json\n            }\n            title\n          }\n        }\n      }\n      featured_contentConnection {\n        edges {\n          node {\n            ... on Dog {\n              ...DogFields\n            }\n          }\n        }\n      }\n      system {\n        created_at\n        uid\n      }\n    }\n  }\n}"): (typeof documents)["query FetchPage($url: String!) {\n  all_global_settings {\n    ...GlobalSettingsFields\n  }\n  all_page(where: {url: $url}) {\n    total\n    items {\n      title\n      url\n      global_field {\n        canonical {\n          href\n          title\n        }\n        description\n        nofollow\n        noindex\n        og_tags {\n          key\n          value\n        }\n        schema\n        title\n      }\n      main_content {\n        ... on PageMainContentMainCopy {\n          __typename\n          main_copy {\n            item {\n              json\n            }\n            title\n          }\n        }\n      }\n      featured_contentConnection {\n        edges {\n          node {\n            ... on Dog {\n              ...DogFields\n            }\n          }\n        }\n      }\n      system {\n        created_at\n        uid\n      }\n    }\n  }\n}"];

export function graphql(source: string): unknown;
export function graphql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;